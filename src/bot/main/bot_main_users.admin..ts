import { Action, Ctx, InjectBot, On, Start, Update } from 'nestjs-telegraf';
import { Telegraf } from 'telegraf';
import { Context } from 'src/user/user.controller';
import {
    actionButtonsAdminMain,
    actionButtonsUsersMainExistFB,
    actionButtonsUsersMainNoFB,
} from 'src/bot/button/bot_admin-markup.buttons';
import { ADMIN_USER_ID, CODE_USER_LOGIN } from '../../user/dto/variables';
import { BotActions } from '../common/enum/bot_actions.enum';
import { messages } from '../../constants/messages';
import { RegistrationHandler } from '../handlers/registration_handlers';
import { FeedbackService } from '../../feedbeck/service/feedback.service';

@Update()
export class BotUsers {
    constructor(
        @InjectBot() private readonly bot: Telegraf<Context>,
        private readonly registrationHandler: RegistrationHandler,
        private readonly feedbackService: FeedbackService,
    ) {}

    @Start()
    async start(@Ctx() ctx: any) {
        const user = ctx.from;

        await ctx.deleteMessage();

        if (user.id === +ADMIN_USER_ID!) {
            // –ï—Å–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ‚Äî —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
            await ctx.sendMessage('–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω!üòé', actionButtonsAdminMain);
        } else {
            // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–¥
            await ctx.sendMessage(messages.welcome(user.first_name));
            ctx.session.isAwaitingCode = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–∞
        }
    }

    @On('text')
    async onMessage(@Ctx() ctx: any) {
        const userId = ctx.from?.id;

        if (userId === +ADMIN_USER_ID!) return;

        if (ctx.session.isAwaitingCode) {
            const enteredCode = ctx.message.text;
            const validCode = CODE_USER_LOGIN!;

            if (enteredCode === validCode) {
                // –ï—Å–ª–∏ –∫–æ–¥ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
                await ctx.deleteMessage();
                await this.registrationHandler.handlerRegistration(ctx);
                // –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –∫–Ω–æ–ø–∫—É —Å —É—á–µ—Ç–æ–º –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
                const buttons = await this.getUserMenuWithFeedbackButton(userId);
                await ctx.sendMessage(messages.accessGranted, buttons);

                ctx.session.isAwaitingCode = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            } else {
                // –ï—Å–ª–∏ –∫–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π
                await ctx.sendMessage(messages.invalidCode);
            }
        } else {
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–∞
            await ctx.sendMessage(messages.startCommand);
        }
    }

    @Action(BotActions.ALL_USERS)
    async allUsersCallback(@Ctx() ctx: Context) {
        await ctx.answerCbQuery();

        await ctx.editMessageReplyMarkup(undefined); // —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏

        await this.registrationHandler.handlerAllUsers(ctx);

        await ctx.sendMessage('–î–∞ –∫ —Ç–µ–±–µ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞—Ö–æ–¥–∏—Ç, —à–æ —Ç—ã –∫–ª–∞—Ü–∞–µ—à—åüòÅ', actionButtonsAdminMain);
    }

    async getUserMenuWithFeedbackButton(userId: number) {
        const feedback = await this.feedbackService.getUserFeedback(userId);
        if (!feedback) {
            return actionButtonsUsersMainNoFB;
        } else return actionButtonsUsersMainExistFB;
    }
}
