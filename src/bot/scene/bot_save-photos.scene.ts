import { Ctx, On, Scene } from 'nestjs-telegraf';
import { BotScene } from '../common/enum/bot_scene.enum';
import { ResumeService } from '../../resume/service/resume.service';
import axios from 'axios';
import { CloudinaryService } from '../../common/cloudinary/cloudinary.service';
import { actionButtonsAdminTwo } from '../../app.buttons';

@Scene(BotScene.SavePhotoScene)
export class SavePhotoScene {
    constructor(
        private readonly resumeService: ResumeService,
        private readonly cloudinary: CloudinaryService,
    ) {}
    @On('message')
    async updatePhoto(@Ctx() ctx: any) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ
        if (!ctx.session.isAwaitingPhotoUpdate) {
            await ctx.reply('–Ø –Ω–µ –æ–∂–∏–¥–∞—é —Ñ–æ—Ç–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ.');
            return;
        }

        const message = ctx.message;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–æ—Ç–æ
        const photo = message.photo?.pop(); // –ë–µ—Ä—ë–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
        if (!photo) {
            await ctx.reply('–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ñ–æ—Ç–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –∫–ª—é—á–æ–º.');
            return;
        }
        // –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –∏–∑ –ø–æ–¥–ø–∏—Å–∏
        const photoKey = message.caption?.trim(); // –ü–æ–¥–ø–∏—Å—å —Ñ–æ—Ç–æ ‚Äî —ç—Ç–æ –∫–ª—é—á
        if (!photoKey) {
            await ctx.reply('–ö–ª—é—á –Ω–µ —É–∫–∞–∑–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é.');
            return;
        }

        const resumeId = +process.env.DB_ID!;

        const keyIsUnique = await this.resumeService.getPhotoByKey(resumeId, photoKey);
        if (keyIsUnique) {
            await ctx.reply('–ö–ª—é—á —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω.üôÑ');
            return;
        }
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª
            const fileLink = await ctx.telegram.getFileLink(photo.file_id);

            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ Cloudinary
            const uploadResult = await this.cloudinary.uploadToCloudinary(fileLink.href, photoKey);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ ResumeService
            await this.resumeService.addPhoto(resumeId, photoKey, uploadResult.secure_url);

            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
            ctx.session.isAwaitingPhotoUpdate = false;

            await ctx.reply(`–§–æ—Ç–æ —Å –∫–ª—é—á–æ–º "${photoKey}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!`);

            await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:', actionButtonsAdminTwo);

            ctx.scene.leave();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ:', error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }
}
