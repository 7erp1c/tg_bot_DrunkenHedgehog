import { Action, Ctx, Update } from 'nestjs-telegraf';
import { DataBatton } from '../common/enum/bot_actions.enum';
import { Context } from 'telegraf';
import {
    actionButtonsGetResume,
    actionButtonsGetResumeUsers,
    actionButtonsUsersMainNoFB,
} from '../button/bot_admin-markup.buttons';
import { LinksEnum } from '../common/enum/bot_actions-links.enum';
import { adminId } from '../../constants/messages';

@Update()
export class GetResumeActions {
    @Action(DataBatton.GetResumeInfo)
    async getResume(@Ctx() ctx: Context): Promise<void> {
        try {
            await ctx.editMessageText('–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–±–æ –º–Ω–µüôÉ:', actionButtonsGetResume);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ get_resume:', error);
        }
    }

    @Action(LinksEnum.resumeBeck)
    async beckResume(@Ctx() ctx: Context): Promise<void> {
        try {
            const userId = ctx.from?.id;

            if (userId != adminId) {
                await ctx.editMessageText(
                    '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–†–µ–∑—é–º–µ", —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–±–æ –º–Ω–µ:',
                    actionButtonsGetResumeUsers,
                );
            } else await ctx.editMessageText('get resumeüòà:', actionButtonsGetResume);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ beck_resume:', error);
        }
    }

    @Action(DataBatton.GetResumeForUsers)
    async getResumeUsers(@Ctx() ctx: Context): Promise<void> {
        try {
            await ctx.editMessageText(
                '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–±–æ –º–Ω–µ:',
                actionButtonsGetResumeUsers,
            );
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ get_resume:', error);
        }
    }

    @Action(DataBatton.BackToMainMenuUsers)
    async beckResumeUsers(@Ctx() ctx: Context): Promise<void> {
        try {
            await ctx.editMessageText(
                `
            –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–†–µ–∑—é–º–µ", —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–±–æ –º–Ω–µ.
            –í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –û–°.
               `,
                actionButtonsUsersMainNoFB,
            );
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ beck_resume:', error);
        }
    }
}
